{{$namespace := include "vechr.namespace" .}}
{{$releasename := include "vechr.releasename" .}}

{{/* >>>>>>>> This is variable for Influx <<<<<<<<< */}}
{{$isInfluxInternalEnabled := .Values.influx.enabled}}
{{$influxName := .Values.influx.name}}
{{$influxPort := .Values.influx.deployment.port}}
{{/* >>>>>>>> This is variable for Influx <<<<<<<<< */}}

{{/* >>>>>>>> This is variable for PostgreSQL <<<<<<<<< */}}
{{$isPostgreInternalEnabled := .Values.postgresql.enabled}}
{{$postgreUsername := .Values.postgresql.auth.username}}
{{$postgrePassword := .Values.postgresql.auth.password}}
{{$postgrePort := .Values.postgresql.containerPorts.postgresql}}
{{/* >>>>>>>> This is variable for PostgreSQL <<<<<<<<< */}}

{{/* >>>>>>>> This is variable for Monitoring <<<<<<<<< */}}
{{$isMonitoringEnabled := .Values.monitoring.enabled}}
{{$lokiHost :=  .Values.monitoring.loki.host}}
{{$lokiUsername :=  .Values.monitoring.loki.username}}
{{$lokiPassword :=  .Values.monitoring.loki.password}}
{{$otlpHost := .Values.monitoring.otlp.host}}
{{/* >>>>>>>> This is variable for Monitoring <<<<<<<<< */}}

{{$secretNameTLS := .Values.natsSelfSigned.secretName}}
{{range $i, $value := .Values.microservices | default dict}}
{{if $value.enabled}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vechr-microservice-{{$value.name}}
  namespace: {{ $namespace }}
  labels:
    app.kubernetes.io/component: vechr-microservice
    app.kubernetes.io/instance: vechr-microservice-{{$value.name}}
    app.kubernetes.io/name: microservice
    app.kubernetes.io/part-of: vechr-iiot
    app.kubernetes.io/version: {{$value.tag}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: vechr-microservice
      app.kubernetes.io/instance: vechr-microservice-{{$value.name}}
      app.kubernetes.io/name: microservice
      app.kubernetes.io/part-of: vechr-iiot
  template:
    metadata:
      name: vechr-microservice-service
      labels:
        app.kubernetes.io/component: vechr-microservice
        app.kubernetes.io/instance: vechr-microservice-{{$value.name}}
        app.kubernetes.io/name: microservice
        app.kubernetes.io/part-of: vechr-iiot
        app.kubernetes.io/version: {{$value.tag}}
    spec:
      restartPolicy: Always
      containers:
        - name: vechr-microservice-{{$value.name}}
          image: {{$value.image}}:{{$value.tag}}
          {{if and $value.externalPort}}
          ports:
            - name: http
              containerPort: {{$value.externalPort}}
              protocol: TCP
            - name: metrics
              containerPort: 8081
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: {{$value.externalPort}}
            initialDelaySeconds: 60
            periodSeconds: 20
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 30
          readinessProbe:
            httpGet:
              path: /health
              port: {{$value.externalPort}}
            initialDelaySeconds: 60
            periodSeconds: 20
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 30
          startupProbe:
            httpGet:
              path: /health
              port: {{$value.externalPort}}
            initialDelaySeconds: 60
            periodSeconds: 20
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 30
          {{ end }}
          imagePullPolicy: {{$value.imagePullPolicy | default "Always"}}
          {{ if $value.env}}
          env:
            {{ if $isMonitoringEnabled }}
            - name: LOKI_HOST
              value: {{ $lokiHost | default ""}}
            - name: LOKI_USERNAME
              value:  {{ $lokiUsername | default ""}}
            - name: LOKI_PASSWORD
              value:  {{ $lokiPassword | default ""}}
            - name: OTLP_HTTP_URL
              value:  {{ $otlpHost | default ""}}
            {{ end }}
            - name: NATS_CA
              value: "/certificate/ca.crt"
            - name: NATS_KEY
              value: "/certificate/tls.key"
            - name: NATS_CERT
              value: "/certificate/tls.crt"
            - name: NATS_URL
              value: "nats://nats-lb.{{$namespace}}.svc.cluster.local:4222"
            - name: APP_PORT
              value: {{$value.externalPort | quote }}
            {{if $value.influx}}
            {{if $isInfluxInternalEnabled}}
            - name: INFLUX_URL
              value: "http://{{$influxName}}-service.{{$namespace}}.svc.cluster.local:{{$influxPort}}/"
            {{else}}
            - name: INFLUX_URL
              value: "http://{{$value.influx.serviceName}}.{{$namespace}}.svc.cluster.local:{{$value.influx.port}}/"
            {{end}}
            {{end}}
            {{if $value.smtp}}
            - name: EMAIL_HOST
              value: "{{$value.smtp.serviceName}}.{{$namespace}}.svc.cluster.local"
            - name: EMAIL_PORT
              value: {{$value.smtp.port | quote }}
            {{end}}
            {{if $value.db}}
            {{if $isPostgreInternalEnabled}}
            - name: DB_URL
              value: "postgresql://{{$postgreUsername}}:{{$postgrePassword}}@{{$releasename}}-postgresql.{{$namespace}}.svc.cluster.local:{{$postgrePort}}/{{$value.databaseName}}?schema=public&connect_timeout=300"
            {{else}}
            - name: DB_URL
              value: "postgresql://{{$value.db.username}}:{{$value.db.password}}@{{$value.db.serviceName}}.{{$namespace}}.svc.cluster.local:{{$value.db.port}}/{{$value.databaseName}}?schema=public&connect_timeout=300"
            {{end}}
            {{end}}
            {{range $i, $env_value := $value.env}}
            - name: {{$env_value.name}}
              value: {{quote $env_value.value}}
            {{end}}
          {{end}}
          # Resource Allocation
          {{- if $value.resources }}
          resources:
            requests:
              memory: {{ $value.resources.requests.memory | default "100Mi" | quote }}
              cpu: {{ $value.resources.requests.cpu | default "100m" | quote }}
            limits:
              memory: {{ $value.resources.limits.memory | default "1024Mi" | quote }}
              cpu: {{ $value.resources.limits.cpu | default "1" | quote }}
          {{- end}}
          volumeMounts:
            - name: secret-nats
              mountPath: "/certificate/ca.crt"
              subPath: ca.crt
            - name: secret-nats
              mountPath: "/certificate/tls.crt"
              subPath: tls.crt
            - name: secret-nats
              mountPath: "/certificate/tls.key"
              subPath: tls.key

      volumes:
        - name: secret-nats
          secret:
            secretName: {{ $secretNameTLS }}
{{end}}
{{end}}